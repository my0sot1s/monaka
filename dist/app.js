'use strict';var _express = require('express');var _express2 = _interopRequireDefault(_express);var _bodyParser = require('body-parser');var _bodyParser2 = _interopRequireDefault(_bodyParser);var _http = require('http');var _http2 = _interopRequireDefault(_http);var _path = require('path');var _path2 = _interopRequireDefault(_path);var _judgment = require('./model/judgment');var _cons = require('./model/cons');var _laws = require('./model/laws');var _utils = require('./model/utils');var pip = _interopRequireWildcard(_utils);var _log = require('./log');var log = _interopRequireWildcard(_log);function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }console.log('^^^^ Server Running ^^^^');var app = (0, _express2.default)();var PORT = process.env.PORT || 3100;var fileName = 'public/log.txt';var pokers = (0, _utils.createPokers)();app.use(_express2.default.static(require('path').join(__dirname, 'public')));app.use(_bodyParser2.default.json());app.use(_bodyParser2.default.urlencoded({ extended: false }));app.use(require('cors')()); app.all('*', require('./middleware').default);app.get('/', function (req, res) { res.sendFile(_path2.default.join(__dirname, 'public/index.html'));});app.get('/log', function (req, res) { res.sendFile(_path2.default.join(__dirname, 'public/log.txt'));});app.get('/poker', function (req, res) { var _req$query = req.query, cards1 = _req$query.cards1, cards2 = _req$query.cards2, cards3 = _req$query.cards3; var cards = { cards1: cards1, cards2: cards2, cards3: cards3 }, back = {}, str = ''; for (var item in cards) { if (!cards[item]) continue; var pokers = []; for (var j = 0; j < cards[item].length; j += 2) { pokers.push(cards[item].substring(j, j + 2)); } pokers = (0, _utils.sortByValue)(pokers); if (pokers.length !== 13) res.send(new Error('Request có vấn đề vì t ko thể tìm đc đủ số quân bài !=13'));else { var temp = (0, _laws.timBinh)(pokers); if (temp) str.concat(str += '' + temp[2].toString().replace(/,/g, '') + temp[1].toString().replace(/,/g, '') + temp[0].toString().replace(/,/g, '') + '\r\n');else { var ii = (0, _laws.moonOfShadow)(pokers); var _so = []; for (var i = 0; i < ii.length; i++) { _so = (0, _judgment.soChi)(_so, ii[i]); } ii = _so[0].item; back[item] = ii; str += '' + ii[2].toString().replace(/,/g, '') + ii[1].toString().replace(/,/g, '') + ii[0].toString().replace(/,/g, '') + '\r\n'; } } } if (log.getFileSizeInBytes(fileName) >= 2) log.clearFile(fileName); var logContent = (JSON.stringify(cards, null, 2) + '\r\n' + JSON.stringify(back, null, 2).replace(/\r\n|\s+/g, ' ') + '\r\n .............. \r\n').replace(/r/g, _cons.R).replace(/c/g, _cons.C).replace(/b/g, _cons.B).replace(/t/g, _cons.T); log.appendLog(fileName, logContent); res.send(str);});_http2.default.createServer(app).listen(PORT, function () { console.log('^^^ Moons started at ' + PORT + ' ^^^'); console.log('+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^+');});